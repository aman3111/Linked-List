You are given a Doubly Linked List and an integer x. Remove the node at position x (positions are 1-indexed) from the list, and return the head of the updated list.

Examples:

Input: head = 1 <-> 3 <-> 4, x = 3
Output: 1 <-> 3
Explanation: After deleting the node at position 3 (position starts from 1), the updated linked list is 1 <-> 3.


JAVA CODE:

/*
Structure of a Doubly LinkList
class Node {
    int data;
    Node next;
    Node prev;

    Node(int val) {
        data = val;
        next = null;
        prev = null;
    }
}
*/
class Solution {
    public Node delPos(Node head, int x) {
        if(head == null){
            return null;
        }
        
        if(x == 1){
            Node newHead = head.next;
            if(newHead != null){
                newHead.prev = null;
            }
            
            return newHead;
        }
        
        
        
        Node prev = null;
        Node curr = head;
        
        for(int i=1; i<x; ++i){
            prev = curr;
            curr = curr.next;
        }
        
        prev.next = curr.next;
        
        if(curr.next != null){
            curr.next.prev = prev;
        }
       
        return head;
    }
}
