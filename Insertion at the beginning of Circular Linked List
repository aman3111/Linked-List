You are given a Circular Linked List and an integer key representing a node. Insert the given key node at the beginning of the circular linked list.
Note that the function will receive the tail pointer of the Circular Linked List.
Note:

You don't have to print anything, just return the head of the modified list in each function.
Nodes may consist of Duplicate values.
The key may or may not be present.
Examples:

Input: head: 1 -> 7 -> 8 -> 10, key = 5

Output: 5 -> 1 -> 7 -> 8 -> 10
Explanation: After inserting 5 at the beginning of the given circular linked list, it has elements as 5, 1, 7, 8, 10.


JAVA CODE:

/*
class Node {
    int data;
    Node next;

    Node(int x) {
        data = x;
        next = null;
    }
}
*/
class Solution {
    public Node insertAtBeginning(Node tail, int key) {
        // code here
        Node newNode = new Node(key);
        
        if(tail == null){
            newNode.next = newNode;
            return newNode;
        }else{
            newNode.next = tail.next;
            tail.next = newNode;
        }
        return tail;
    }
}
